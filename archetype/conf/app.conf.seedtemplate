################################################################################
# Tea configuration file
################################################################################

# This sets the `app name` variable which can be used in your code as
app.name = {{ .AppName }}

# A secret string which is passed to cryptographically sign the cookie to prevent
# (and detect) user modification.
# Keep this string secret or users will be able to inject arbitrary cookie values
# into your application
app.secret = {{ .Secret }}


# The IP address on which to listen.
app.httpAddr =

# The port on which to listen.
app.httpPort = 9000

# Whether to use SSL or not.
app.httpSsl = false

# Path to an X509 certificate file, if using SSL.
#app.httpSslCert =

# Path to an X509 certificate key, if using SSL.
#app.httpSslkey =


# the fields of:
# http://golang.org/pkg/net/http/#Cookie
#
# The HttpOnly attribute is supported by most modern browsers. On a supported
# browser, an HttpOnly session cookie will be used only when transmitting HTTP
# (or HTTPS) requests, thus restricting access from other, non-HTTP APIs (such
# as JavaScript). This restriction mitigates, but does not eliminate the threat
# of session cookie theft via cross-site scripting (XSS). This feature applies
# only to session-management cookies, and not other browser cookies.
app.cookieHttpOnly = false

# Each cookie set by Tea is prefixed with this string.
app.cookiePrefix = TEA

# A secure cookie has the secure attribute enabled and is only used via HTTPS,
# ensuring that the cookie is always encrypted when transmitting from client to
# server. This makes the cookie less likely to be exposed to cookie theft via
# eavesdropping.
app.cookieSecure = false


log {
	root {
		fastmode = true
		level = info
		appendrefs = [console]
	}

	appender {
		console {
			type = Console
			layout.pattern = "[%l]%d{MMdd/HH:mm:ss,SSSSSS} %f:%n %m"
		}
	}
}


